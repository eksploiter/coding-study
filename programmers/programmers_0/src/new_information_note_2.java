//코딩테스트 준비를 통해 새롭게 알게된 점들을 기록합니다.

public class new_information_note_2 {
}

// 뭐,, 안 써도 크게 문제 없다.

// 'Scanner' 객체를 닫아 자원을 해제시켜주는 sc.close();
// 이거 안 써도 오류가 생기지는 않더라구요. 꼭 써야할까? 안 써도 상관없을까?

// 'sc.close();' 는 자원을 해제하는 역할을 합니다.
// 'Scanner' 객체는 내부적으로 입력 스트림(예: 표준 입력, 파일 입력 등)을 사용하고, 이를 사용한 후에 명시적으로 닫아주는 것이 권장됩니다.
// 하지만, 표준 입력(System.in)을 사용하는 경우 'close()'를 호출하지 않아도 프로그램 종료 시 자원이 자동으로 해제되기 때문에 큰 문제가 생기지 않습니다.

// 이유 및 권장사항
// 1. 자원 해제: 'Scanner' 가 파일이나 네트워크 스트림 같은 외부 자원을 사용하고 있다면, 명시적으로 닫아주지 않으면 자원 누수(resource leak)가 발생할 수 있습니다.
//              이로 인해 시스템 자원이 고갈되거나 프로그램의 성능이 저하될 수 있습니다.
// 2. 명확성: 명시적으로 'close()'를 호출하면, 코드 작성자와 읽는 사람이 해당 자원이 더 이상 필요 없다는 것을 명확히 알 수 있습니다.
// 3. 버그 방지: 입력 스트림을 닫지 않으면 예기치 않은 버그가 발생할 가능성이 있습니다.
//              특히 대규모 프로젝트에서는 작은 실수도 큰 영향을 미칠 수 있습니다.

// 표준 입력의 경우
// - 표준 입력(System.in): 자원을 자동으로 해제하므로 'close()'를 호출하지 않아도 프로그램에 큰 문제를 일으키지 않습니다.
//                        그러나 이를 습관화하는 것은 좋은 프로그래밍 습관입니다.

// 결론
// - 꼭 필요한 것은 아니다: 표준 입력의 경우 프로그램 종료 시 자원이 자동으로 해제되므로 오류는 발생하지 않습니다.
// - 좋은 습관이다: 자원을 명시적으로 해제하는 것은 좋은 프로그래밍 습관입니다.
//                특히 다른 종류의 입력 스트림(파일, 네트워크 등)을 사용할 때 반드시 필요합니다.

// 따라서, 표준 입력의 경우에는 'close()'를 생략해도 큰 문제는 없지만, 좋은 습관을 기르기 위해서
// 그리고 다른 상황에서도 일관성 있게 자원을 관리하기 위해 'close()'를 호출하는 것이 좋습니다.
